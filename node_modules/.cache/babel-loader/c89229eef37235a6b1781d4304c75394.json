{"ast":null,"code":"/**\n * filesize\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2013 Jason Mulligan\n * @license BSD-3 <https://raw.github.com/avoidwork/filesize.js/master/LICENSE>\n * @link http://filesizejs.com\n * @module filesize\n * @version 1.10.0\n */\n(function (global) {\n  \"use strict\";\n\n  var base = 10,\n      right = /\\.(.*)/,\n      bit = /b$/,\n      bite = /^B$/,\n      zero = /^0$/,\n      options;\n  options = {\n    all: {\n      increments: [[\"B\", 1], [\"kb\", 125], [\"kB\", 1000], [\"Mb\", 125000], [\"MB\", 1000000], [\"Gb\", 125000000], [\"GB\", 1000000000], [\"Tb\", 125000000000], [\"TB\", 1000000000000], [\"Pb\", 125000000000000], [\"PB\", 1000000000000000]],\n      nth: 11\n    },\n    bitless: {\n      increments: [[\"B\", 1], [\"kB\", 1000], [\"MB\", 1000000], [\"GB\", 1000000000], [\"TB\", 1000000000000], [\"PB\", 1000000000000000]],\n      nth: 6\n    }\n  };\n  /**\n   * filesize\n   *\n   * @param  {Mixed}   arg  String, Int or Float to transform\n   * @param  {Mixed}   pos  [Optional] Position to round to, defaults to 2 if shrt is ommitted, or `true` for shrthand output\n   * @param  {Boolean} bits [Optional] Determines if `bit` sizes are used for result calculation, default is true\n   * @return {String}       Readable file size String\n   */\n\n  function filesize(arg) {\n    var result = \"\",\n        bits = true,\n        skip = false,\n        i,\n        neg,\n        num,\n        pos,\n        shrt,\n        size,\n        sizes,\n        suffix,\n        z; // Determining arguments\n\n    if (arguments[3] !== undefined) {\n      pos = arguments[1];\n      shrt = arguments[2];\n      bits = arguments[3];\n    } else {\n      typeof arguments[1] === \"boolean\" ? shrt = arguments[1] : pos = arguments[1];\n\n      if (typeof arguments[2] === \"boolean\") {\n        bits = arguments[2];\n      }\n    }\n\n    if (isNaN(arg) || pos !== undefined && isNaN(pos)) {\n      throw new Error(\"Invalid arguments\");\n    }\n\n    shrt = shrt === true;\n    bits = bits === true;\n    pos = shrt ? 1 : pos === undefined ? 2 : parseInt(pos, base);\n    num = Number(arg);\n    neg = num < 0; // Flipping a negative number to determine the size\n\n    if (neg) {\n      num = -num;\n    } // Zero is now a special case because bytes divide by 1\n\n\n    if (num === 0) {\n      if (shrt) {\n        result = \"0\";\n      } else {\n        result = \"0 B\";\n      }\n    } else {\n      if (bits) {\n        sizes = options.all.increments;\n        i = options.all.nth;\n      } else {\n        sizes = options.bitless.increments;\n        i = options.bitless.nth;\n      }\n\n      while (i--) {\n        size = sizes[i][1];\n        suffix = sizes[i][0];\n\n        if (num >= size) {\n          // Treating bytes as cardinal\n          if (bite.test(suffix)) {\n            skip = true;\n            pos = 0;\n          }\n\n          result = (num / size).toFixed(pos);\n\n          if (!skip && shrt) {\n            if (bits && bit.test(suffix)) {\n              suffix = suffix.toLowerCase();\n            }\n\n            suffix = suffix.charAt(0);\n            z = right.exec(result);\n\n            if (suffix === \"k\") {\n              suffix = \"K\";\n            }\n\n            if (z !== null && z[1] !== undefined && zero.test(z[1])) {\n              result = parseInt(result, base);\n            }\n\n            result += suffix;\n          } else if (!shrt) {\n            result += \" \" + suffix;\n          }\n\n          break;\n        }\n      }\n    } // Decorating a 'diff'\n\n\n    if (neg) {\n      result = \"-\" + result;\n    }\n\n    return result;\n  } // CommonJS, AMD, script tag\n\n\n  if (typeof exports !== \"undefined\") {\n    module.exports = filesize;\n  } else if (typeof define === \"function\") {\n    define(function () {\n      return filesize;\n    });\n  } else {\n    global.filesize = filesize;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}